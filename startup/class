    class PersistentDict(zict.Func):
            return f"<{self.__class__.__name__} {dict(self)!r}>"
    class StatsPluginV33(PluginBase):
#class Slits(Device):
########## motor classes ##########
class MotorCenterAndGap(Device):
class Blades(Device):
class Filter(Device):
#class MotorSlits(Blades, MotorCenterAndGap):
#class VirtualMotorSlits(Blades, VirtualMotorCenterAndGap):
#class Elm(SingleTrigger, DetectorBase):
class TIFFPluginWithFileStore(TIFFPlugin, FileStoreTIFFIterativeWrite):
class ProsilicaDetectorCamV33(ProsilicaDetectorCam):
# class Pilatus2M(SingleTrigger, PilatusDetector):
class StandardProsilica(SingleTrigger, ProsilicaDetector):
class StandardProsilicaV33(SingleTriggerV33, ProsilicaDetector):
class PilatusDetectorCamV33(PilatusDetectorCam):
# class Pilatus(SingleTrigger, PilatusDetector):
class PilatusV33(SingleTriggerV33, PilatusDetector):
# class Pilatus800V33(PilatusV33):
class Pilatus800V33(SingleTriggerV33, PilatusDetector):
class Pilatus8002V33(PilatusV33):
class Pilatus300V33(PilatusV33):
class Pilatus2M(SingleTrigger, PilatusDetector):
class Pilatus2MV33(SingleTriggerV33, PilatusDetector):
#class StandardProsilicaWithTIFF(StandardProsilica):
#class StandardsimDetectorV33(SingleTriggerV33, ProsilicaDetector):
#class ImagePluginCustom(ImagePlugin):
#class TIFFPluginWithFileStore(TIFFPlugin, FileStoreTIFFIterativeWrite):
class PhotonicSciences_CMS(Device):
class ScaleSignal(ophyd.signal.DerivedSignal):
class EpicsSignalROWait(ophyd.EpicsSignalRO):
class EpicsSignalROIntegrate(ophyd.EpicsSignalRO):
#class SerialDevice():
class Agilent_34970A(Device):
class Keithley_2000(Device):
class TTL_control(object):
class Minichiller(Device):
class SyringePump(Device):
#class Diode_AIpv(object):    
class AOpv(object):    
class AIpv(object):    
class Relaypv(object):    
class DIpv(object):    
class RTDpv(object):    
class TCpv(object):    
class ioLogik(Device):
class MassFlowControl(Device):
class PhotoThermalAnnealer():
class TwoButtonShutterNC(TwoButtonShutter):
class TriState(Device):
#class TriState(Device):
class Foo:
class Foo:
class Foo:
class Foo:
class Foo:
class Foo:
class TriState(Device):
class BeamlineDetector(object):
class CMS_SAXS_Detector(BeamlineDetector):
class CMS_WAXS_Detector(BeamlineDetector):
class BeamlineElement(object):
class Shutter(BeamlineElement):
class GateValve(Shutter):
class ThreePoleWiggler(BeamlineElement):
class Monitor(BeamlineElement):
class DiagnosticScreen(Monitor):
class PointDiode_CMS(Monitor):
class IonChamber_CMS(Monitor):
class Scintillator_CMS(Monitor):
class DiamondDiode_CMS(Monitor):
class CMSBeam(object):
    This class represents the 'beam' at the beamline. This collects together aspects
    # End class CMSBeam(object)
class Beamline(object):
    '''Generic class that encapsulates different aspects of the beamline.
        text += '\n\n[comment for beamline: {}]'.format(self.__class__.__name__)
class CMS_Beamline(Beamline):
    # End class CMS_Beamline(Beamline)
class CMS_Beamline_GISAXS(CMS_Beamline):
class CMS_Beamline_XR(CMS_Beamline_GISAXS):
class SavingCallback(CallbackBase):
class PrintCallback(CallbackBase):
class MotorWait(CallbackBase):
class LiveTable_Custom(LiveTable):
    # class LiveTable(CallbackBase)
class LiveStat(CallbackBase):
    # Note: Follows the style/naming of class LiveFit(CallbackBase),
        class Result(object):
class LiveStatPlot(LivePlot):
class LivePlot_Custom(LivePlot):
class LiveFitPlot_Custom(LiveFitPlot):
class LiveFit_Custom(LiveFit):
from IPython.core.magic import Magics, magics_class, line_magic
#@magics_class
#class CMSCustomMagics(BlueskyMagics):
                    #low_limit = high_limit = exc.__class__.__name__
                    #offset = exc.__class__.__name__
                #value = v.__class__.__name__  # e.g. 'DisconnectedError'
class CoordinateSystem(object):
    A generic class defining a coordinate system. Several coordinate systems
        # class (and subclasses) are instantiated.
        # Thus, the Axis() class has generic versions of these methods, which are
        # appropriated renamed (bound, actually) when a class is instantiated.
            # the CoordinateSystem() class.
        text += '\n\n[comment for CoordinateSystem: {} ({})].'.format(self.name, self.__class__.__name__)
            print('Temperature functions not implemented in {}'.format(self.__class__.__name__))
            print('Temperature functions not implemented in {}'.format(self.__class__.__name__))
            print('Marks for {:s} (class {:s}):'.format(self.name, self.__class__.__name__))
    # End class CoordinateSystem(object)
class Axis(object):
    # '.xp', etc., we programmatically generate these methods when the class 
    # (and subclasses) are instantiated.
    # Thus, the Axis() class has generic versions of these methods, which are
    # appropriated renamed (bound, actually) when a class is instantiated.
                    print("Error: %s %s has 'base_stage' and 'motor' set to 'None'." % (self.__class__.__name__, self.name))
            print("Error: %s %s has 'base_stage' set to 'None'." % (self.__class__.__name__, self.name))
class Sample_Generic(CoordinateSystem):
    The Sample() classes are used to define a single, individual sample. Each
    Logging of comments also includes the sample name. Different Sample() classes
            #print("Note: No base/stage/holder specified for sample '{:s}'. Assuming '{:s}' (class {:s})".format(name, base.name, base.__class__.__name__))
        text += '\n\n[comment for sample: {} ({})].'.format(self.name, self.__class__.__name__)
            #print('Temperature functions not implemented in {}'.format(self.__class__.__name__))
            #print('Temperature functions not implemented in {}'.format(self.__class__.__name__))
            #print('Temperature functions not implemented in {}'.format(self.__class__.__name__))
class Stage(CoordinateSystem):
class SampleStage(Stage):
class Holder(Stage):
    '''The Holder() classes are used to define bars/stages that hold one or more 
    samples. This class can thus help to keep track of coordinate conversions, 
            #print('Temperature functions not implemented in {}'.format(self.__class__.__name__))
            #print('Temperature functions not implemented in {}'.format(self.__class__.__name__))
            #print('Temperature functions not implemented in {}'.format(self.__class__.__name__))
class PositionalHolder(Holder):
    '''This class is a sample holder that is one-dimensional. E.g. a bar with a
    samples. This class thus helps to associate each sample with its position
        # This method should be over-ridden in sub-classes, so as to properly
class SampleTSAXS_Generic(Sample_Generic):
class SampleGISAXS_Generic(Sample_Generic):
class SampleCDSAXS_Generic(Sample_Generic):
class SampleXR_WAXS(SampleGISAXS_Generic):
class SampleGonio_Generic(SampleGISAXS_Generic):
class SampleSecondStage(SampleGISAXS_Generic):
class GIBar(PositionalHolder):
    '''This class is a sample bar for grazing-incidence (GI) experiments.'''
class CapillaryHolder(PositionalHolder):
    '''This class is a sample holder that has 15 slots for capillaries.'''
class CapillaryHolderThreeRows(CapillaryHolder):
    '''This class is a sample holder that has 15x3 slots for transmission geometry.'''
        # This method should be over-ridden in sub-classes, so as to properly
class CapillaryHolderHeated(CapillaryHolder):
class GIBar_long_thermal(GIBar):
    '''This class is a sample bar with heating/cooling feature and 6" long bar for grazing-incidence (GI) experiments.'''
class GIBar_Linkam(GIBar):
    '''This class is a sample bar with heating/cooling feature and 6" long bar for grazing-incidence (GI) experiments.'''
class WellPlateHolder(PositionalHolder):
    '''This class is a sample holder for 96 well plate. 
        # This method should be over-ridden in sub-classes, so as to properly
class PaloniThermalStage(CapillaryHolder):
    '''This class is a sample holder made by Jason Paloni. 
        # This method should be over-ridden in sub-classes, so as to properly
class DSCStage(CapillaryHolder):
    '''This class is a sample holder for DSC pans. 
        # This method should be over-ridden in sub-classes, so as to properly
class CapillaryHolderThermal(CapillaryHolder):
    '''This class is a sample holder for 2row capillary holder. 
        # This method should be over-ridden in sub-classes, so as to properly
class GIBarSecondStage(GIBar):
    '''This class is a sample bar for grazing-incidence (GI) experiments at the 2nd sample stage.'''
class HumidityStage(GIBar):
    '''This class is for the humidity stage for multiple samples.'''
class HumidityTransmissionStage(CapillaryHolder):
    '''This class is for the humidity transmission stage for multiple samples.'''
class InstecStage60(CapillaryHolder):
        # This method should be over-ridden in sub-classes, so as to properly
class OffCenteredHoder(GIBar):
class SampleXR(SampleGISAXS_Generic):
class SampleXR_test(SampleGISAXS_Generic):
class SampleExchangeRobot(Stage):
#class Queue(object):
class Queue(CoordinateSystem):
# Note: This will break until class is updated to not use gs at all.
class SampleTSAXS(SampleTSAXS_Generic):
class SampleGISAXS(SampleGISAXS_Generic):
class SampleCDSAXS(SampleCDSAXS_Generic):
class Sample(SampleTSAXS):
